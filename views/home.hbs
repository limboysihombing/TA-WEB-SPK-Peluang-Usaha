<div class="loading-page" id="loading-page">
  <div class="d-flex justify-content-center" >
    <div id="loading" class="text-center">
      <div class="spinner-border text-white" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="text-white">
        <h4>Sedang Menganalisis Lokasi...</h4>
      </div>
    </div>
    
  </div>
</div>

<section id="detail_usaha" class="bg-white mt-4">
  
</section>

<div class="pac-card card rounded bg-white shadow ml-2" id="pac-card">
    <div class="card-body">
      
      <h5 class="mb-2">Cari Rekomendasi Usaha</h5>
      <div class="dropdown-divider"></div>
      <form>
        <div class="form-group">
          <label for="text_lokasi"  style="font-size: 14px;">Cari Lokasi</label>
          <input type="text" class="form-control" name="" id="text_lokasi" placeholder="">
        </div>
  
        <div class="form-group mb-0">
          <label for="modalForm" style="font-size: 14px;">Modal Yang Dimiliki</label>
          <input type="number" min="0" class="form-control" id="text_modal_usaha" placeholder="" value="20000000">
        </div>

        <div id="alert_form_usaha"></div>
        <button id="btn-reset-form" type="button" class="my-1 p-0 px-1 ml-auto btn btn-outline-warning btn-sm">Reset</button>
        <button id="btn_cari_usaha" type="button" class="w-100 mt-4 btn btn-info shadow">Telusuri</button>
      </form>
    </div>
  </div>
  
<section id="map_section">
  <div class="container-fluid position vh-100 p-0" id="map-container">
    <div id="map"></div>
  </div>
</section>

<section id="analisis_section">
  <div id="hasil_analisis"></div>
</section>

<section id="rekomendasi_section">
  <div id="rekomendasi"></div>
</section>

<div class="modal fade" id="map_on_modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modal_title">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body p-0">
        
        <div id="map_modal" style="width: 100%; height: 300px;">

        </div>
        
      </div>
      <div class="modal-footer">
        <p class="footer_modal_label"></p>
      </div>
    </div>
  </div>
</div>
  
  <script src="/bootstrap/js/popper.js"></script>
  <script src="/bootstrap/js/jquery.js"></script>
  <script src="/bootstrap/js/bootstrap.min.js"></script>
  
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBeNiSKscMn5k2Ymh0FKA6Ubmt7weTjVMU&libraries=places&callback=init"></script>

  <script>
    let navFixedWidth = false
    let namaKelurahanLokasi = ''
    let wilayah = {}
    let mapModal, map, infoWindow, geocoder, service, searchBox, circleRadius;
    let markers = [], modalMarkers = [], pesaingMarkers = [];

    let card = document.getElementById('pac-card');
    let txtLokasi = document.getElementById('text_lokasi');
    let txtModalUsaha = document.getElementById('text_modal_usaha');
    let btnResetForm = document.getElementById('btn-reset-form')

    let tpadat, kpadat, cpadat, padat, spadat;
    let tingkatKepadatanLokasi = "tidak padat";
    const medan = {lat: 3.597031, lng: 98.678513};

    namaTitikLokasi =''

    //Init Map
    function init() {
      btnResetForm.style.display = "none"
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 11,
        center: medan,
        mapTypeControl: false,
        fullscreenControl: false,
        scaleControl: true,
        streetViewControl: false,
        scaleControlOptions: { position: google.maps.ControlPosition.RIGHT_TOP },
        streetViewControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
      })

      geocoder = new google.maps.Geocoder();
      infoWindow = new google.maps.InfoWindow;
      service = new google.maps.places.PlacesService(map);

      map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);
      searchBox = new google.maps.places.SearchBox(txtLokasi);
      
      searchBox.addListener('places_changed', function() {
        let places = searchBox.getPlaces();

        if (places.length == 0) {
          return;
        }

        clearMarkers()

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }

          const icon = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location,
          }));

          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });

      map.addListener('click', function(e) {
        addMarker(e.latLng);
      });

    }

    txtLokasi.addEventListener('input', (e) => {
      if(txtLokasi.value.length > 0 || txtModalUsaha.value.length > 0) {
        btnResetForm.style.display = 'block'
        return
      }
      btnResetForm.style.display = 'none'
    })

    txtModalUsaha.addEventListener('input', (e) => {
      if(txtLokasi.value.length > 0 || txtModalUsaha.value.length > 0) {
        btnResetForm.style.display = 'block'
        return
      }
      btnResetForm.style.display = 'none'
    })

    btnResetForm.addEventListener('click', (e) => {
      txtLokasi.value = null
      txtModalUsaha.value = null
      clearMarkers()
      document.getElementById('alert_form_usaha').innerHTML = ''
      circleRadius.setMap(null)
      btnResetForm.style.display = 'none'
    })

    function addMarker(pos) {
      clearMarkers()
      let marker = new google.maps.Marker({
        map: map,
        zoom: 1,
        position: pos,
      })
      markers.push(marker)
      
      geocoder.geocode({ location: pos }, function(results, status) {
        if (status === "OK") {

          if (results[0]) {
            txtLokasi.value = results[0].formatted_address

            let address_component = results[0].address_components
            namaTitikLokasi = ''
            nomorTitikLokasi = ''
            for(let i = 0; i< address_component.length; i++) {
              if(address_component[i].types[0] === 'administrative_area_level_4') {
                namaKelurahanLokasi = address_component[i].long_name
                console.log(namaKelurahanLokasi)
              
              }

              if(address_component[i].types[0] === 'administrative_area_level_2') {
                if(address_component[i].long_name === 'Kota Medan' || address_component[i].long_name === 'Medan City'){

                  namaTitikLokasi += address_component[i].long_name + '.'
                  $('#alert_form_usaha').html('')
                } else {
                  console.log(address_component[i].long_name)
                  let alertHtml =
                  `
                    <div class="alert mt-2 alert-warning alert-dismissible fade show" role="alert">
                      âš  Lokasi dipilih harus berada di wilayah kota Medan.
                      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true" class="p-0">&times;</span>
                      </button>
                    </div>
                  `
                  $('#alert_form_usaha').html(alertHtml)
                }
                break
              }
              if(address_component[i].types[0] === "street_number") {
                nomorTitikLokasi = address_component[i].long_name
                continue
              } else if(address_component[i].types[0] === "route") {
                if(nomorTitikLokasi != '') {
                  namaTitikLokasi += `${address_component[i].long_name} No. ${nomorTitikLokasi}, `
                } else {
                  namaTitikLokasi += `${address_component[i].long_name}, `
                }
                continue
              }
              namaTitikLokasi += address_component[i].long_name + ', '
            }

            console.log(results)
            btnResetForm.style.display = 'block'
          } else {
            window.alert("Data lokasi tidak ditemukan.");
          }
        } else {
          window.alert("Geocoder failed due to: " + status);
        }
      });

      if(circleRadius != undefined) {
        circleRadius.setMap(null)
      }
      
      circleRadius = new google.maps.Circle({
        strokeColor: "#858585",
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: "#FF0000",
        fillOpacity: 0,
        map: map,
        center: pos,
        radius:500
      });
      
      marker.setAnimation(google.maps.Animation.BOUNCE);
      setTimeout(function() {
        marker.setAnimation(null)
      }, 2000)
    }
      
    function clearMarkers() {
      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = []
    }

    // gunakan GPS
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        let pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        // infoWindow.setPosition(pos);
        // infoWindow.setContent('Location found.');
        // addMarker(pos)
        // infoWindow.open(map);
      
        // map.setCenter(pos);
      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } 
    else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
                            'Error: The Geolocation service failed.' :
                            'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
    }

    let info =[]

    function addModalMarkers(pos, title, titikLokasiUsaha, targetMap) {
      let distance = getDistance(titikLokasiUsaha, pos)
      let marker = new google.maps.Marker({
        map: targetMap,
        zoom: 1,
        position: pos,
        title: title
      })
      modalMarkers.push(marker)

      let infowindow = new google.maps.InfoWindow({  content: `${title}, Jarak Â±${Math.round(distance)}m` });
      
      marker.addListener("click", function() {
        infowindow.open(targetMap, marker);
      });
    }
    
    let rad = function(x) {
      return x * Math.PI / 180;
    };

    var getDistance = function(p1, p2) {
      var R = 6378137; // Earthâ€™s mean radius in meter
      var dLat = rad(p2.lat() - p1.lat());
      var dLong = rad(p2.lng() - p1.lng());
      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *
        Math.sin(dLong / 2) * Math.sin(dLong / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;
      return d; // returns the distance in meter
    };

    function hitungKepadatanPenduduk(x) {

      if (x <= 3233) tpadat = 1;
      else if (3233 <= x && x <= 8288.75)
      {
          tpadat = ((8288.75 - x) / (8288.75 - 3233)).toFixed(2);
      }
      else tpadat = 0;

      if (x <= 3233 || x >= 8288.75) kpadat = 0;
      else if (3233 <= x && x <= 8288.75)
      {
          kpadat = ((x - 3233) / (8288.75 - 3233)).toFixed(2);
      }
      else kpadat = ((13344.5 - x) / (13344.5 - 3233)).toFixed(2);

      if (x <= 8288.75 || x >= 18400.25) cpadat = 0;
      else if (8288.75 <= x && x <= 13344.5)
        cpadat = ((x - 8288.75) / (13344.5 - 8288.75)).toFixed(2);
      else 
        cpadat = ((18400.25 - x) / (18400.25 - 8288.75)).toFixed(2);

      if (x <= 13344.5 || x >= 23456) padat = 0;
      else if (13344.5 <= x && x <= 18400.25)
        padat = ((x - 13344.5) / (18400.25 - 13344.5)).toFixed(2);
      else 
        padat = ((23456 - x) / (23456 - 13344.5)).toFixed(2);

      if (x <= 18400.25) spadat = 0;
      else if (18400.25 <= x && x <= 23456)
        spadat = ((x - 18400.25) / (23456 - 18400.25)).toFixed(2);
      else 
        spadat = 1;

      if (kpadat >= tpadat) { tingkatKepadatanLokasi = "kurang padat"; }
      if (cpadat >= kpadat && cpadat >= tpadat) { tingkatKepadatanLokasi = "cukup padat"; }
      if (padat >= cpadat && padat >= kpadat && padat >=tpadat) { tingkatKepadatanLokasi = "padat"; }
      if (spadat >= padat && spadat >= cpadat && spadat >= kpadat && spadat>=tpadat) { tingkatKepadatanLokasi = "sangat padat"; }


    }
    // Cari pesaing / usaha sejenis
    function cariPesaing(pos, usaha) {
      return new Promise((resolve, reject) => {
        service.nearbySearch({location : pos, radius : 500, language: 'id', name: `${usaha}`}, (results, status) => {
          
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            let pesaing = []
            results.forEach(hasil => {
              if(getDistance(pos, hasil.geometry.location) <= 500){
                
                const jarak = getDistance(pos, hasil.geometry.location)
                hasil['jarak'] = jarak
                pesaing.push(hasil)
              }
            })
            resolve(pesaing)
          } else if(status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            let pesaing = []
            resolve(pesaing)
          } else {
            let pesaing = []
            resolve(pesaing)
          }

        })
      })
    }
    
    function cariTargetPasar(pos, target) {

      return new Promise((resolve, reject) => {
        service.nearbySearch({location : pos, radius : 500, language: 'id', name: `${target}`}, (results, status) => {
          
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            let targetPasar = []
            let numTerdekat = 501
            results.forEach(hasil => {
              if(getDistance(pos, hasil.geometry.location) <= 500){
                const jarak = getDistance(pos, hasil.geometry.location)
                hasil['jarak'] = jarak
                targetPasar.push(hasil)
              }
            })
            resolve(targetPasar)
            
          }else if(status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            let targetPasar = []
            resolve(targetPasar)
            
          } else {
            let targetPasar = []
            resolve(targetPasar)
          }

        });
      })
    }
    
    const ambilDataUsaha = () => {
      return new Promise((resolve, reject) => {
        fetch(`http://localhost:3000/api/usaha/ambilSemuaUsaha`, 
        {
          headers: {
            token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF9wZW5nZ3VuYSI6Ik9BazVSOVQyR04iLCJlbWFpbCI6InVzZXJAbWFpbC5jb20iLCJuYW1hX3BlbmdndW5hIjoidXNlciIsImlhdCI6MTU5NDcwMjg0N30.G_H_qaNIWPBtMz90RS0CP1L7sRs7QAC-1lOxaA_h8pg',
          },
          mode: 'cors',
        }).then(response => {
          return response.json()
        }).then(data => {
          resolve(data.usaha)
        })
      })
    }

    const ambilTingkatKepadatanLokasi = (kelurahan) => {
      return new Promise((resolve, reject) => {
        fetch(`http://localhost:3000/api/wilayah?kelurahan=${kelurahan}`
        ).then(response => {
          return response.json()
        }).then(data => {
          console.log(data)
          if(data.wilayah){
            wilayah = data.wilayah
            resolve(parseFloat(data.wilayah.kepadatan_penduduk))
          } else {
            reject('bukan kota medan')
          }
        })
      })
    }

    function compare( a, b ) {
      if ( a.jarak < b.jarak ){
        return -1;
      }
      if ( a.jarak > b.jarak ){
        return 1;
      }
      return 0;
    }

    async function cariRekomendasiUsaha(pos) {
      // Ambil data usaha
      let modalUsaha = txtModalUsaha.value
      let listTargetPasar = []
      let dataTargetPasar = {}
      let dataPesaing = {}
      let tKepadatan = 0
      
      let usaha = await ambilDataUsaha()
      try {

      tKepadatan = await ambilTingkatKepadatanLokasi(namaKelurahanLokasi)
      } catch(reason){

        $('#loading-page').hide()

        let alertHtml =
        `
          <div class="alert mt-2 alert-warning alert-dismissible fade show" role="alert">
            âš  Data wilayah tidak ditemukan
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
              <span aria-hidden="true" class="p-0">&times;</span>
            </button>
          </div>
          `
          $('#alert_form_usaha').html(alertHtml)
        console.log('alasan = ' + reason)
        return
      }

      console.log('Daftar Usaha Dari Database')
      console.log(usaha)
      
      
      //gabungkan target pasar dari  masing masing usaha menjadi 1 variabel
      usaha.forEach(usaha => {
        let targetPasar = usaha.target_pasar.toLowerCase().split(',')
        for(let i = 0; i < targetPasar.length; i++) {
          // Lakukan pengecekan apakah target pasar sudah ada
          if(listTargetPasar.indexOf(targetPasar[i].trim()) > -1) {
            return
          } else {
            listTargetPasar.push(targetPasar[i].trim())
          }
        }
      })
      console.log('List Target Pasar')
      console.log(listTargetPasar)
      
      // Lakukan pencarian semua target pasar yang ada di lokasi
      for(let i = 0; i < listTargetPasar.length; i++) {
        const hasil = await cariTargetPasar(pos, listTargetPasar[i])
        dataTargetPasar[`${listTargetPasar[i]}`] = hasil
      }
      console.log('Data Target Pasar')
      console.log(dataTargetPasar)

      for(let i = 0; i < usaha.length; i++) {
        const pesaing = await cariPesaing(pos, usaha[i].nama_usaha)
        dataPesaing[`${usaha[i].nama_usaha}`] = pesaing
      }
      console.log('Data Pesaing')
      console.log(dataPesaing)
      // Masuk Algoritma --------------


      console.log('Nilai kepadatan pada lokasi: ')
      hitungKepadatanPenduduk(tKepadatan)
      console.log(`Tidak padat\t: ${tpadat}`)
      console.log(`Kurang Padat\t: ${kpadat}`)
      console.log(`Cukup padat\t: ${cpadat}`)
      console.log(`Padat\t: ${padat}`)
      console.log(`Sangat Padat\t: ${spadat}`)
      console.log()
      console.log(`Maka lokasi = ${tingkatKepadatanLokasi}`)

      // Ini adalah proses pembentukan tabel 3114 Nilai Preferensi Kriteria
      console.log("\nTabel nilai Preferensi Kriteria :");
      console.log("\nAlternatif\tC1\tC2\tC3\tC4\tC5");

      let preferensi = []
      

      usaha.forEach((item, index) => {
        
        let jlhTargetPasar = 0
        
        let itemPreferensi = {}

        for(let j = 0; j <= 5; j++) {

          if(j == 0) {
            itemPreferensi['Alternatif'] = 'U' + (index + 1)
            itemPreferensi['namaUsaha'] = item.nama_usaha

          }
          else if(j == 1) {
            // Nilai Modal Usaha (1/0)
            if(item.modal <= modalUsaha) {
              itemPreferensi['modal'] = 1
            } else {
              itemPreferensi['modal'] = 0
            }
          }
          else if(j == 2) {
            let jlh = 0
            
            const targetPasar = item.target_pasar.toLowerCase().split(',')
            targetPasar.forEach(target => {
              //if(target.trim() in dataTargetPasar) {
              if(dataTargetPasar[`${target}`.trim()].length > 0) {
                jlh += dataTargetPasar[`${target}`.trim()].length
              }
            })
            itemPreferensi['jlhTargetPasar'] = jlh
          }
          else if(j == 3) { 
            let jarak = 0
            const targetPasar = item.target_pasar.toLowerCase().split(',')
            targetPasar.forEach(target => {
              //if(target.trim() in dataTargetPasar) {
              if(dataTargetPasar[`${target}`.trim()].length > 0) {
                dataTargetPasar[`${target}`.trim()].sort(compare)
                jarak = dataTargetPasar[`${target}`.trim()][0].jarak
              }
            })
            itemPreferensi['jarakPasarTerdekat'] = jarak
          }
          else if(j == 4) {
            let preferensiKepadatan = ["tidak padat", "kurang padat", "cukup padat", "padat", "sangat padat"]
            
            let ramai = 1, sepi = 5
            for(let a = 0; a < preferensiKepadatan.length; a++) {
              if( tingkatKepadatanLokasi == preferensiKepadatan[a]) {
                if(item.kepadatan_penduduk == 1) {
                  itemPreferensi['kepadatanPendudukDiperlukan'] = ramai
                } else {
                  itemPreferensi['kepadatanPendudukDiperlukan'] = sepi
                }
                ramai += 1
                sepi -= 1
              }
            }
            
          }
          else if(j == 5) {
            let jlh = 1;
            
            const {nama_usaha} = item
            jlh += dataPesaing[`${nama_usaha}`].length
            itemPreferensi['jumlahPesaing'] = (jlh)
          }
        }

        preferensi.push(itemPreferensi)
        itemPreferensi = {}
        

      })
      console.log(preferensi)

      // Perhitungan Algoritma
      //Pemberian nilai bobot kriteria
      let w1 = 5, w2 = 4, w3 = 3, w4 = 5, w5 = 2;
      console.log("\nBobot Kriteria W1(Modal) = " + w1); //kriteria Modal
      console.log("W2(Modal) = " + w2);//kriteria Jumlah Target Pasar
      console.log("W3(Jarak Terget Pasar) = " + w3);//kriteria Jarak Target Pasar
      console.log("W4(Kepadatan Penduduk) = " + w4);//kriteria Kepadatan Penduduk
      console.log("W5(Jumlah Peaing) = " + w5);//kriteria Jumlah Pesaing

      // Tahap normalisasi (perbaikan bobot)
      console.log('Hasil perbaikan bobot:')
      let W1 = parseFloat(w1 / (w1 + w2 + w3 + w4 + w5)).toFixed(3)
      let W2 = parseFloat(w2 / (w1 + w2 + w3 + w4 + w5)).toFixed(3)
      let W3 = parseFloat(w3 / (w1 + w2 + w3 + w4 + w5)).toFixed(3)
      let W4 = parseFloat(w4 / (w1 + w2 + w3 + w4 + w5)).toFixed(3)
      let W5 = parseFloat(w5 / (w1 + w2 + w3 + w4 + w5)).toFixed(3)

      console.log("W1 = " + W1);
      console.log("W2 = " + W2);
      console.log("W3 = " + W3);
      console.log("W4 = " + W4);
      console.log("W5 = " + W5);

      //Tahap Menentukan Preferensi Alternatif atau Nilai Vektor (S)
      console.log("\nHasil Perhitungan nilai Vektor S");

      let S = []
      let totalNilaiS = 0.0
      let STemp = 0.0
      for(let i = 0; i < usaha.length; i++) {
        // Menggunakan rumus mencari nilai Vektor (S)
        if(preferensi[i].jlhTargetPasar == 0) {
          STemp = 0.0
        } else {
          STemp = 
          (Math.pow(parseFloat(preferensi[i].modal), W1).toFixed(3))
          * (Math.pow(parseFloat(preferensi[i].jlhTargetPasar), W2).toFixed(3))
          * (Math.pow(parseFloat(preferensi[i].jarakPasarTerdekat), -W3).toFixed(3)) 
          * (Math.pow(parseFloat(preferensi[i].kepadatanPendudukDiperlukan), W4).toFixed(3))
          * (Math.pow(parseFloat(preferensi[i].jumlahPesaing), -W5).toFixed(3))
        }
        S.push(['U' + (i + 1), usaha[i].nama_usaha, STemp])
        totalNilaiS += STemp
        console.log(`S${i+1} = ${S[i][1]}`)
      }

      console.log(S)
      console.log('Total nilai S = ' + totalNilaiS)

      //Menentukan Preferensi relatif atau nilai Vektor (V)
      console.log('Hasil Perhitungan nilai Vektor V')

      let V = []
      for(let i = 0; i < usaha.length; i++) {
        let v = 0
        if(totalNilaiS != 0.0) {
          v = (parseFloat(S[i][2]) /totalNilaiS).toFixed(3)
        }
        
        V.push({'v': v, 'idUSaha': usaha[i].id_usaha, 'namaUsaha':usaha[i].nama_usaha})
        console.log(`${S[i][2]} / ${totalNilaiS}`)
        usaha[i]['v'] = v
      }

      console.log(V)
      
      // Filter usaha

      let usahaDirekomendasikan = []
      usaha.forEach(u => {
        if(u.v > 0 ) {
          usahaDirekomendasikan.push(u)
        }
      })


      renderHasilRekomendasi(usahaDirekomendasikan, dataTargetPasar, dataPesaing, pos)
      $('#loading-page').hide()
    }

    function compareUsaha( a, b ) {
      if ( a.v > b.v ){
        return -1;
      }
      if ( a.v < b.v ){
        return 1;
      }
      return 0;
    }

    
    function renderHasilRekomendasi(dataUsaha, dataTarget, dataPesaing, pos) {
      $('#rekomendasi').html('')
      $('#hasil_analisis').html('')
      let data = dataUsaha.sort(compareUsaha)
      
      let analisisLokasiHtml = ''
      let rekomendasiHtml = ''

      if(data.length > 0) {
        analisisLokasiHtml += 
        `
        <div class="container mt-4">
          <div class="row">
            <div class="col-12">

              <div class="jumbotron">
                <p class="h3 text-success">
                  <strong>Ditemukan ${data.length} Rekomendasi Usaha Yang Tepat Di Lokasi Anda.</strong>
                </p>
                <p class="lead">
                  <i class="fas fa-map-marker fa-sm fa-fw mr-2 text-gray-400"></i>
                  Titik Lokasi: &emsp;${namaTitikLokasi}
                </p>
                <hr class="my-4">
                <table>
                  <tbody>
                    <tr>
                      <td>
                        <svg class="mr-2" width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-cash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                          <path fill-rule="evenodd" d="M15 4H1v8h14V4zM1 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H1z"/>
                          <path d="M13 4a2 2 0 0 0 2 2V4h-2zM3 4a2 2 0 0 1-2 2V4h2zm10 8a2 2 0 0 1 2-2v2h-2zM3 12a2 2 0 0 0-2-2v2h2zm7-4a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"/>
                        </svg>
                        
                        Modal Usaha
                        </td>
                      <td> : </td>
                      <td>Rp.${txtModalUsaha.value}</td>
                    </tr>
                    <tr>
                      <td><i class="fa fa-users fa-sm fa-fw mr-2"></i> Tingkat Kepadatan Penduduk</td>
                      <td> : </td>
                      <td>${tingkatKepadatanLokasi}</td>
                    </tr>
                  </tbody>
                </table>
              </div>

            </div>
          </div>
        </div>
        `
        
        $('#hasil_analisis').html(analisisLokasiHtml)
        rekomendasiHtml = 
          `
            <div class="container mt-4">
              <div class="row">
                <div class="col-12 mb-2">
                  <h4>Daftar Rekomendasi Usaha</h4>
                </div>
          `
        data.forEach(usaha => {
          rekomendasiHtml +=
          `
            <div class="col-md-4 col-sm-6 mb-4">
              <div class="card card-border-bottom shadow">
                <img class="img-item-usaha" height="250px" id="${usaha.id_usaha}" src="img/img-3.jpg" alt="" class="card-img-top">
                <div class="card-body">
                  <h5 class="card-title"><a style="cursor: pointer;" id="${usaha.id_usaha}" class="title-item-usaha"><strong>${usaha.nama_usaha}</strong></a></h5>
                  <p class="card-text">Modal &emsp; : Rp.${usaha.modal}<br><small>Kategori &emsp; : ${usaha.jenis_usaha}</small></p>
                </div>
              </div>
            </div>
          `
        });

        rekomendasiHtml += `
            </div>
          </div>
        `
        $('#rekomendasi').html(rekomendasiHtml)
      } 
      else {
        analisisLokasiHtml += 
        `
        <div class="container mt-4">
          <div class="row">
            <div class="col-12">

              <div class="jumbotron">
                <p class="h3 text-warning">
                  <strong>Tidak Ditemukan Rekomendasi Usaha Yang Tepat Di Lokasi Anda</strong>
                </p>
                <i class="fas fa-map-marker fa-sm fa-fw mr-2 text-gray-400"></i>
                <p class="lead">Titik Lokasi: &emsp;${namaTitikLokasi}</p>
                <hr class="my-4">
                <table>
                  <tbody>
                    <tr>
                      <td>
                      <svg class="mr-2" width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-cash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                          <path fill-rule="evenodd" d="M15 4H1v8h14V4zM1 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H1z"/>
                          <path d="M13 4a2 2 0 0 0 2 2V4h-2zM3 4a2 2 0 0 1-2 2V4h2zm10 8a2 2 0 0 1 2-2v2h-2zM3 12a2 2 0 0 0-2-2v2h2zm7-4a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"/>
                        </svg>
                      Modal Usaha</td>
                      <td> : </td>
                      <td>${txtModalUsaha.value}</td>
                    </tr>
                    <tr>
                      <td><i class="fa fa-users fa-sm fa-fw mr-2"></i> Tingkat Kepadatan Penduduk</td>
                      <td> : </td>
                      <td>${tingkatKepadatanLokasi}</td>
                    </tr>
                  </tbody>
                </table>
              </div>

            </div>
          </div>
        </div>
        `
        $('#hasil_analisis').html(analisisLokasiHtml)
      }
      // Scroll to rekomendasi element
      $([document.documentElement, document.body]).animate({
        scrollTop: $("#hasil_analisis").offset().top - 80
      }, 1000);

      let imgItemUsaha = $('.img-item-usaha')
      let titleItemUsaha = $('.title-item-usaha')
      for(let i = 0; i< imgItemUsaha.length; i++) {
        const itemId = $(imgItemUsaha[i]).attr('id')
        $(imgItemUsaha[i]).click((e) => {

          let objUsaha = data.find((u) => {
            return u.id_usaha == itemId
          })
          let namaUsaha = objUsaha.nama_usaha
          renderDetailUsaha(objUsaha, dataTarget, dataPesaing, pos)
        })
      }
      for(let i = 0; i< titleItemUsaha.length; i++) {
        const itemId = $(titleItemUsaha[i]).attr('id')
        $(titleItemUsaha[i]).click((e) => {

          let objUsaha = data.find((u) => {
            return u.id_usaha == itemId
          })
          let namaUsaha = objUsaha.nama_usaha
          renderDetailUsaha(objUsaha, dataTarget, dataPesaing, pos)
        })
      }
    }
    
    $(document).ready(function(){
      $('#loading-page').hide()
      $('#detail_usaha').hide()
      $('#btn_cari_usaha').click(() => {
        
        if(!$.trim($('#text_lokasi').val()) || !$.trim($('#text_modal_usaha').val())) {
          let message = 'Lokasi dan modal usaha tidak boleh kosong.'
          const alertHtml = 
          `
          <div class="alert mt-2 alert-warning alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
              <span aria-hidden="true" class="p-0">&times;</span>
            </button>
          </div>
          `
          $('#alert_form_usaha').html(alertHtml)

        } else {
          const lat = markers[0].getPosition().lat()
          const lng = markers[0].getPosition().lng()
          cariRekomendasiUsaha(markers[0].getPosition())
          $('#loading-page').show()
        }
      })

      window.onscroll = () => {
        let currentScrollPos = window.pageYOffset
        if(!navFixedWidth) {
          if (currentScrollPos > 100) {
              $('#nav-scroll').removeClass('container-fluid')
              $('#nav-scroll').addClass('container')
              $('#navigasi').addClass('bg-white')
          } else {
            $('#navigasi').removeClass('bg-white') 
            
            $('#nav-scroll').removeClass('container')
            $('#nav-scroll').addClass('container-fluid')
          }
        } else {
          $('#nav-scroll').removeClass('container-fluid').removeClass('container').addClass('container')
          $('#navigasi').removeClass('fixed-top').addClass('sticky-top').addClass('bg-white')
        }
      }
    });

    let scrlPos = 0
    

    async function renderDetailUsaha(usahaObj, target, pesaing, titikLokasiUsaha) {
      
      // Gabungkan target pasar
      let listTarget = usahaObj.target_pasar.toLowerCase().split(',')
      let listDataTarget = []
      listTarget.forEach(t => {
        console.log(t.trim())
        console.log(target[t.trim()])
        listDataTarget = [...listDataTarget, ...target[t.trim()]];

      })
      let listDataPesaing = pesaing[usahaObj.nama_usaha]
      let baseUrl = 'http://localhost:3000/api/usaha'

      let latitude = titikLokasiUsaha.lat()
      let longitude = titikLokasiUsaha.lng()
      let id_usaha = usahaObj.id_usaha
      let id_wilayah = wilayah.id_wilayah
      let btnSaveToggle = 0


      // Gabungkan pesaing
      
      scrlPos = window.pageYOffset

      navFixedWidth = true
      $('#analisis_section').hide()
      $('#rekomendasi_section').hide()
      $('#map_section').hide()
      $('#detail_usaha').show()

      let detailUsahaHtml = 
      `
        <div class="container">
          <div class="row">
            <div class="col-12">
              <div class="card mb-4 shadow position-relative">
                <img src="../img/img-3.jpg" height="300px" alt="" class="card-img-top">
                <span id="btn_tutup_detail" style="position: absolute; top: 10px;right: 10px;" class="shadow-sm btn btn-sm btn-outline-danger">Tutup</span>
                <div class="card-body position-relative">
                  <button id="btn_save" data-toggle="tooltip" data-placement="bottom" title="Simpan" class="btn btn-sm btn-info shadow"><i class="fas fa-save"></i></button>
                  <h5 class="card-title"><strong>Detail Usaha ${usahaObj.nama_usaha}</strong></h5>
                  <h6>Modal Usaha: Rp.${usahaObj.modal}</h6>
                  <div id="save_alert"></div>
                  <h6>Deskripsi Usaha</h6>
                  <p>${usahaObj.deskripsi}</p>
                  
                  <div class="row">
                    <div class="col-12">
                      <h6><strong>Analisis Lokasi</strong></h6>
                      <div class="jumbotron" id="target-pesaing">
                        <div class="row">
                          <div class="col-md-6 mb-3">
                            <h6 class="mb-2">Target Pasar (${listDataTarget.length} tempat)</h6>
                            <div class="row">
                              <div class="col-12">
                                <ul class="list-group shadow">
                                  
                                
                                `
                                listDataTarget.forEach(t => {
                                  detailUsahaHtml += `
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                      ${t.name}
                                      <span class="badge badge-light badge-pill">Â±${Math.round(t.jarak)}m</span>
                                    </li>

                                  `
                                })
                                detailUsahaHtml += `
                                </ul>
                                <button type="button" id="target_on_map" class="mt-2 shadow btn btn-info btn-sm">Lihat dalam Peta</button>
                              </div>
                            </div>
                          </div>
                          <div class="col-md-6 mb-3">
                            <h6 class="mb-2">Daftar Pesaing (${listDataPesaing.length} usaha)</h6>
                            <div class="row">
                              <div class="col-12">
                                <ul class="list-group shadow">
                                `
                                if(listDataPesaing.length > 0) {
                                  listDataPesaing.forEach(p => {
                                    detailUsahaHtml += `
                                      <li class="list-group-item d-flex justify-content-between align-items-center">
                                        ${p.name}
                                        <span class="badge badge-light badge-pill">Â±${Math.round(p.jarak)}m</span>
                                      </li>
                                    `
                                  })
                                     
                                    detailUsahaHtml += `</ul><button type="button" id="pesaing_on_map" class="mt-2 shadow btn btn-info btn-sm">Lihat dalam Peta</button>`
                                }
                                else {
                                  detailUsahaHtml += `
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                      Tidak ada pesaing dengan jenis usaha yang sama.
                                      
                                    </li>
                                  </ul>
                                  `
                                }
                          detailUsahaHtml += `
                                
                              </div>
                            </div>
                          </div>

                        </div>

                      </div>
                      
                    </div>
                  </div>

                  
                  <!-- Bahan Baku -->
                  <h6 class="mt-4 mb-2"><strong>Bahan baku</strong></h6>

                  <table class="table">
                      <thead>
                        <tr>
                          <th scope="col">#</th>
                          <th scope="col">First</th>
                          <th scope="col">Last</th>
                          <th scope="col">Handle</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <th scope="row">1</th>
                          <td>Mark</td>
                          <td>Otto</td>
                          <td>@mdo</td>
                        </tr>
                        <tr>
                          <th scope="row">2</th>
                          <td>Jacob</td>
                          <td>Thornton</td>
                          <td>@fat</td>
                        </tr>
                        <tr>
                          <th scope="row">3</th>
                          <td>Larry</td>
                          <td>the Bird</td>
                          <td>@twitter</td>
                        </tr>
                      </tbody>
                    </table>

                  <strong>Analisis Keuntungan</strong>
                  <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Atque necessitatibus maxime, voluptate officia velit sit ratione minus voluptates saepe error inventore tempora quo vel, eligendi, ipsam similique aperiam totam eius.</p>
                  <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Atque necessitatibus maxime, voluptate officia velit sit ratione minus voluptates saepe error inventore tempora quo vel, eligendi, ipsam similique aperiam totam eius.</p>

                </div>
              </div>
            </div>
          </div>
        </div>
      `


      $('#detail_usaha').html(detailUsahaHtml)
      $([document.documentElement, document.body]).animate({
          scrollTop: 0
        }, 500);

      $('#btn_tutup_detail').click(() => {
        $('#map_section').show()
        $('#analisis_section').show()
        $('#rekomendasi_section').show()
        $('#detail_usaha').hide()
        
        $([document.documentElement, document.body]).animate({
          scrollTop: scrlPos
        }, 500);

      })

      $('#target_on_map').click(() => {
        $('#map_on_modal').modal('show')
        $('#footer_modal_label').text(`Terdapat sekitar ${listDataTarget.length} tempat.`)
        $('#modal_title').text('Peta Target Pasar')
        
        mapModal = new google.maps.Map(document.getElementById('map_modal'), {
          zoom: 15,
          center: titikLokasiUsaha,
          mapTypeControl: false,
          fullscreenControl: false,
          scaleControl: true,
          streetViewControl: false,
          scaleControlOptions: { position: google.maps.ControlPosition.RIGHT_TOP },
          streetViewControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        })

        listDataTarget.forEach(target => {
          addModalMarkers(target.geometry.location, target.name, titikLokasiUsaha, mapModal)
        })

      })

      $('#pesaing_on_map').click(() => {
        $('#map_on_modal').modal('show')
        $('#footer_modal_label').text(`Terdapat sekitar ${listDataPesaing.length} usaha.`)
        $('#modal_title').text('Peta Daftar Pesaing')
        
        mapModal = new google.maps.Map(document.getElementById('map_modal'), {
          zoom: 15,
          center: titikLokasiUsaha,
          mapTypeControl: false,
          fullscreenControl: false,
          scaleControl: true,
          streetViewControl: false,
          scaleControlOptions: { position: google.maps.ControlPosition.RIGHT_TOP },
          streetViewControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        })

        listDataPesaing.forEach(target => {
          addModalMarkers(target.geometry.location, target.name, titikLokasiUsaha, mapModal)
        })

      })
      
      //cek apakah usaha sudah ada tersimpan
      cekUsahaTersimpan(baseUrl+'/cekUsahaTersimpan', {latitude, longitude, id_usaha, id_wilayah})
      .then(data => {
        console.log(data)
        if(data.usaha.length > 0) {
          $('#btn_save').html('<i class="fas fa-trash"></i>')
          $("#btn_save").attr("title", "Hapus usaha tersimpan.")
          $('#btn_save').removeClass('btn-info').addClass('btn-warning');
          $('#btn_save').prop('disabled', false);
          btnSaveToggle = 1
        }
      })

      $('#btn_save').click(() => {
        
        $('#btn_save').prop('disabled', true);

        if(btnSaveToggle == 0) {
          simpanUsaha(baseUrl + '/simpanUsaha', {latitude, longitude, id_usaha, id_wilayah})
          .then(data => {
            console.log(data); // JSON data parsed by `data.json()` call
            if(data.status == 200) {
              $('#btn_save').html('<i class="fas fa-trash"></i>')
              $("#btn_save").attr("title", "Hapus usaha tersimpan.")
              $('#btn_save').removeClass('btn-info').addClass('btn-warning');
              $('#btn_save').prop('disabled', false);
              let alertHtml = `<div class="alert alert-success" role="alert">Usaha ini berhasil di simpan.</div>`
              $('#save_alert').html(alertHtml)
              btnSaveToggle = 1
            }
          });
        } else {
          hapusUsahaTersimpan(baseUrl+'/hapusUsahaTersimpan', {latitude, longitude, id_usaha, id_wilayah})
          .then(data => {
            
            if (data.status == 200) {
              $('#btn_save').html('<i class="fas fa-save"></i>')
              $("#btn_save").attr("title", "Simpan Usaha.")
              $('#btn_save').removeClass('btn-warning').addClass('btn-info');
              $('#btn_save').prop('disabled', false);
              let alertHtml = `<div class="alert alert-success" role="alert">Usaha ini sudah tidak tersimpan.</div>`
              $('#save_alert').html(alertHtml)
              btnSaveToggle = 0
            }
          })
        }
      })

    }
    function readCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for(var i=0;i < ca.length;i++) {
          var c = ca[i];
          while (c.charAt(0)==' ') c = c.substring(1,c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
    }

    async function simpanUsaha(url = '', data = {}) {
      // Default options are marked with *
      const response = await fetch(url, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
          'Content-Type': 'application/json',
          token: readCookie('token')
          // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data) // body data type must match "Content-Type" header
      });
      console.log(response.status)
      return response.json(); // parses JSON response into native JavaScript objects
    }
    async function hapusUsahaTersimpan(url = '', data = {}) {
      // Default options are marked with *
      const response = await fetch(url, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
          'Content-Type': 'application/json',
          token: readCookie('token')
          // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data) // body data type must match "Content-Type" header
      });
      return response.json(); // parses JSON response into native JavaScript objects
    }
    async function cekUsahaTersimpan(url = '', data = {}) {
      // Default options are marked with *
      const response = await fetch(url, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
          'Content-Type': 'application/json',
          token: readCookie('token')
          // 'Content-Type': 'application/x-www-form-urlencoded',
        },
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: JSON.stringify(data) // body data type must match "Content-Type" header
      });
      return response.json(); // parses JSON response into native JavaScript objects
    }
  </script>

  